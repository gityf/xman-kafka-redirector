/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xman.service.impl;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.TSerializer;
import org.apache.thrift.protocol.TSimpleJSONProtocol;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-23")
public class HelloMessage implements org.apache.thrift.TBase<HelloMessage, HelloMessage._Fields>, java.io.Serializable, Cloneable, Comparable<HelloMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HelloMessage");

  private static final org.apache.thrift.protocol.TField MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("msgId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MSG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("msgName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MSG_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("msgBody", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VALID_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("validFlag", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCode", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ERROR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMsg", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HelloMessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HelloMessageTupleSchemeFactory());
  }

  public long msgId; // required
  public String msgName; // required
  public String msgBody; // required
  public boolean validFlag; // required
  public int errorCode; // required
  public String errorMsg; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MSG_ID((short)1, "msgId"),
    MSG_NAME((short)2, "msgName"),
    MSG_BODY((short)3, "msgBody"),
    VALID_FLAG((short)4, "validFlag"),
    ERROR_CODE((short)5, "errorCode"),
    ERROR_MSG((short)6, "errorMsg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MSG_ID
          return MSG_ID;
        case 2: // MSG_NAME
          return MSG_NAME;
        case 3: // MSG_BODY
          return MSG_BODY;
        case 4: // VALID_FLAG
          return VALID_FLAG;
        case 5: // ERROR_CODE
          return ERROR_CODE;
        case 6: // ERROR_MSG
          return ERROR_MSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MSGID_ISSET_ID = 0;
  private static final int __VALIDFLAG_ISSET_ID = 1;
  private static final int __ERRORCODE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("msgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MSG_NAME, new org.apache.thrift.meta_data.FieldMetaData("msgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MSG_BODY, new org.apache.thrift.meta_data.FieldMetaData("msgBody", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALID_FLAG, new org.apache.thrift.meta_data.FieldMetaData("validFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errorCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERROR_MSG, new org.apache.thrift.meta_data.FieldMetaData("errorMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HelloMessage.class, metaDataMap);
  }

  public HelloMessage() {
  }

  public HelloMessage(
          long msgId,
          String msgName,
          String msgBody,
          boolean validFlag,
          int errorCode,
          String errorMsg)
  {
    this();
    this.msgId = msgId;
    setMsgIdIsSet(true);
    this.msgName = msgName;
    this.msgBody = msgBody;
    this.validFlag = validFlag;
    setValidFlagIsSet(true);
    this.errorCode = errorCode;
    setErrorCodeIsSet(true);
    this.errorMsg = errorMsg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HelloMessage(HelloMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.msgId = other.msgId;
    if (other.isSetMsgName()) {
      this.msgName = other.msgName;
    }
    if (other.isSetMsgBody()) {
      this.msgBody = other.msgBody;
    }
    this.validFlag = other.validFlag;
    this.errorCode = other.errorCode;
    if (other.isSetErrorMsg()) {
      this.errorMsg = other.errorMsg;
    }
  }

  public HelloMessage deepCopy() {
    return new HelloMessage(this);
  }

  @Override
  public void clear() {
    setMsgIdIsSet(false);
    this.msgId = 0;
    this.msgName = null;
    this.msgBody = null;
    setValidFlagIsSet(false);
    this.validFlag = false;
    setErrorCodeIsSet(false);
    this.errorCode = 0;
    this.errorMsg = null;
  }

  public long getMsgId() {
    return this.msgId;
  }

  public HelloMessage setMsgId(long msgId) {
    this.msgId = msgId;
    setMsgIdIsSet(true);
    return this;
  }

  public void unsetMsgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSGID_ISSET_ID);
  }

  /** Returns true if field msgId is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgId() {
    return EncodingUtils.testBit(__isset_bitfield, __MSGID_ISSET_ID);
  }

  public void setMsgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSGID_ISSET_ID, value);
  }

  public String getMsgName() {
    return this.msgName;
  }

  public HelloMessage setMsgName(String msgName) {
    this.msgName = msgName;
    return this;
  }

  public void unsetMsgName() {
    this.msgName = null;
  }

  /** Returns true if field msgName is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgName() {
    return this.msgName != null;
  }

  public void setMsgNameIsSet(boolean value) {
    if (!value) {
      this.msgName = null;
    }
  }

  public String getMsgBody() {
    return this.msgBody;
  }

  public HelloMessage setMsgBody(String msgBody) {
    this.msgBody = msgBody;
    return this;
  }

  public void unsetMsgBody() {
    this.msgBody = null;
  }

  /** Returns true if field msgBody is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgBody() {
    return this.msgBody != null;
  }

  public void setMsgBodyIsSet(boolean value) {
    if (!value) {
      this.msgBody = null;
    }
  }

  public boolean isValidFlag() {
    return this.validFlag;
  }

  public HelloMessage setValidFlag(boolean validFlag) {
    this.validFlag = validFlag;
    setValidFlagIsSet(true);
    return this;
  }

  public void unsetValidFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALIDFLAG_ISSET_ID);
  }

  /** Returns true if field validFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetValidFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __VALIDFLAG_ISSET_ID);
  }

  public void setValidFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALIDFLAG_ISSET_ID, value);
  }

  public int getErrorCode() {
    return this.errorCode;
  }

  public HelloMessage setErrorCode(int errorCode) {
    this.errorCode = errorCode;
    setErrorCodeIsSet(true);
    return this;
  }

  public void unsetErrorCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
  }

  /** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorCode() {
    return EncodingUtils.testBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
  }

  public void setErrorCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERRORCODE_ISSET_ID, value);
  }

  public String getErrorMsg() {
    return this.errorMsg;
  }

  public HelloMessage setErrorMsg(String errorMsg) {
    this.errorMsg = errorMsg;
    return this;
  }

  public void unsetErrorMsg() {
    this.errorMsg = null;
  }

  /** Returns true if field errorMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorMsg() {
    return this.errorMsg != null;
  }

  public void setErrorMsgIsSet(boolean value) {
    if (!value) {
      this.errorMsg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MSG_ID:
      if (value == null) {
        unsetMsgId();
      } else {
        setMsgId((Long)value);
      }
      break;

    case MSG_NAME:
      if (value == null) {
        unsetMsgName();
      } else {
        setMsgName((String)value);
      }
      break;

    case MSG_BODY:
      if (value == null) {
        unsetMsgBody();
      } else {
        setMsgBody((String)value);
      }
      break;

    case VALID_FLAG:
      if (value == null) {
        unsetValidFlag();
      } else {
        setValidFlag((Boolean)value);
      }
      break;

    case ERROR_CODE:
      if (value == null) {
        unsetErrorCode();
      } else {
        setErrorCode((Integer)value);
      }
      break;

    case ERROR_MSG:
      if (value == null) {
        unsetErrorMsg();
      } else {
        setErrorMsg((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MSG_ID:
      return Long.valueOf(getMsgId());

    case MSG_NAME:
      return getMsgName();

    case MSG_BODY:
      return getMsgBody();

    case VALID_FLAG:
      return Boolean.valueOf(isValidFlag());

    case ERROR_CODE:
      return Integer.valueOf(getErrorCode());

    case ERROR_MSG:
      return getErrorMsg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MSG_ID:
      return isSetMsgId();
    case MSG_NAME:
      return isSetMsgName();
    case MSG_BODY:
      return isSetMsgBody();
    case VALID_FLAG:
      return isSetValidFlag();
    case ERROR_CODE:
      return isSetErrorCode();
    case ERROR_MSG:
      return isSetErrorMsg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HelloMessage)
      return this.equals((HelloMessage)that);
    return false;
  }

  public boolean equals(HelloMessage that) {
    if (that == null)
      return false;

    boolean this_present_msgId = true;
    boolean that_present_msgId = true;
    if (this_present_msgId || that_present_msgId) {
      if (!(this_present_msgId && that_present_msgId))
        return false;
      if (this.msgId != that.msgId)
        return false;
    }

    boolean this_present_msgName = true && this.isSetMsgName();
    boolean that_present_msgName = true && that.isSetMsgName();
    if (this_present_msgName || that_present_msgName) {
      if (!(this_present_msgName && that_present_msgName))
        return false;
      if (!this.msgName.equals(that.msgName))
        return false;
    }

    boolean this_present_msgBody = true && this.isSetMsgBody();
    boolean that_present_msgBody = true && that.isSetMsgBody();
    if (this_present_msgBody || that_present_msgBody) {
      if (!(this_present_msgBody && that_present_msgBody))
        return false;
      if (!this.msgBody.equals(that.msgBody))
        return false;
    }

    boolean this_present_validFlag = true;
    boolean that_present_validFlag = true;
    if (this_present_validFlag || that_present_validFlag) {
      if (!(this_present_validFlag && that_present_validFlag))
        return false;
      if (this.validFlag != that.validFlag)
        return false;
    }

    boolean this_present_errorCode = true;
    boolean that_present_errorCode = true;
    if (this_present_errorCode || that_present_errorCode) {
      if (!(this_present_errorCode && that_present_errorCode))
        return false;
      if (this.errorCode != that.errorCode)
        return false;
    }

    boolean this_present_errorMsg = true && this.isSetErrorMsg();
    boolean that_present_errorMsg = true && that.isSetErrorMsg();
    if (this_present_errorMsg || that_present_errorMsg) {
      if (!(this_present_errorMsg && that_present_errorMsg))
        return false;
      if (!this.errorMsg.equals(that.errorMsg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_msgId = true;
    list.add(present_msgId);
    if (present_msgId)
      list.add(msgId);

    boolean present_msgName = true && (isSetMsgName());
    list.add(present_msgName);
    if (present_msgName)
      list.add(msgName);

    boolean present_msgBody = true && (isSetMsgBody());
    list.add(present_msgBody);
    if (present_msgBody)
      list.add(msgBody);

    boolean present_validFlag = true;
    list.add(present_validFlag);
    if (present_validFlag)
      list.add(validFlag);

    boolean present_errorCode = true;
    list.add(present_errorCode);
    if (present_errorCode)
      list.add(errorCode);

    boolean present_errorMsg = true && (isSetErrorMsg());
    list.add(present_errorMsg);
    if (present_errorMsg)
      list.add(errorMsg);

    return list.hashCode();
  }

  @Override
  public int compareTo(HelloMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMsgId()).compareTo(other.isSetMsgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgId, other.msgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgName()).compareTo(other.isSetMsgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgName, other.msgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgBody()).compareTo(other.isSetMsgBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgBody, other.msgBody);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidFlag()).compareTo(other.isSetValidFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validFlag, other.validFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorCode()).compareTo(other.isSetErrorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCode, other.errorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorMsg()).compareTo(other.isSetErrorMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMsg, other.errorMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HelloMessage(");
    boolean first = true;

    sb.append("msgId:");
    sb.append(this.msgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("msgName:");
    if (this.msgName == null) {
      sb.append("null");
    } else {
      sb.append(this.msgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("msgBody:");
    if (this.msgBody == null) {
      sb.append("null");
    } else {
      sb.append(this.msgBody);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("validFlag:");
    sb.append(this.validFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorCode:");
    sb.append(this.errorCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorMsg:");
    if (this.errorMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.errorMsg);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HelloMessageStandardSchemeFactory implements SchemeFactory {
    public HelloMessageStandardScheme getScheme() {
      return new HelloMessageStandardScheme();
    }
  }

  private static class HelloMessageStandardScheme extends StandardScheme<HelloMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HelloMessage struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // MSG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.msgId = iprot.readI64();
              struct.setMsgIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MSG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msgName = iprot.readString();
              struct.setMsgNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MSG_BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msgBody = iprot.readString();
              struct.setMsgBodyIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VALID_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.validFlag = iprot.readBool();
              struct.setValidFlagIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.errorCode = iprot.readI32();
              struct.setErrorCodeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ERROR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorMsg = iprot.readString();
              struct.setErrorMsgIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HelloMessage struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MSG_ID_FIELD_DESC);
      oprot.writeI64(struct.msgId);
      oprot.writeFieldEnd();
      if (struct.msgName != null) {
        oprot.writeFieldBegin(MSG_NAME_FIELD_DESC);
        oprot.writeString(struct.msgName);
        oprot.writeFieldEnd();
      }
      if (struct.msgBody != null) {
        oprot.writeFieldBegin(MSG_BODY_FIELD_DESC);
        oprot.writeString(struct.msgBody);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VALID_FLAG_FIELD_DESC);
      oprot.writeBool(struct.validFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
      oprot.writeI32(struct.errorCode);
      oprot.writeFieldEnd();
      if (struct.errorMsg != null) {
        oprot.writeFieldBegin(ERROR_MSG_FIELD_DESC);
        oprot.writeString(struct.errorMsg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HelloMessageTupleSchemeFactory implements SchemeFactory {
    public HelloMessageTupleScheme getScheme() {
      return new HelloMessageTupleScheme();
    }
  }

  private static class HelloMessageTupleScheme extends TupleScheme<HelloMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HelloMessage struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMsgId()) {
        optionals.set(0);
      }
      if (struct.isSetMsgName()) {
        optionals.set(1);
      }
      if (struct.isSetMsgBody()) {
        optionals.set(2);
      }
      if (struct.isSetValidFlag()) {
        optionals.set(3);
      }
      if (struct.isSetErrorCode()) {
        optionals.set(4);
      }
      if (struct.isSetErrorMsg()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetMsgId()) {
        oprot.writeI64(struct.msgId);
      }
      if (struct.isSetMsgName()) {
        oprot.writeString(struct.msgName);
      }
      if (struct.isSetMsgBody()) {
        oprot.writeString(struct.msgBody);
      }
      if (struct.isSetValidFlag()) {
        oprot.writeBool(struct.validFlag);
      }
      if (struct.isSetErrorCode()) {
        oprot.writeI32(struct.errorCode);
      }
      if (struct.isSetErrorMsg()) {
        oprot.writeString(struct.errorMsg);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HelloMessage struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.msgId = iprot.readI64();
        struct.setMsgIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.msgName = iprot.readString();
        struct.setMsgNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.msgBody = iprot.readString();
        struct.setMsgBodyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.validFlag = iprot.readBool();
        struct.setValidFlagIsSet(true);
      }
      if (incoming.get(4)) {
        struct.errorCode = iprot.readI32();
        struct.setErrorCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.errorMsg = iprot.readString();
        struct.setErrorMsgIsSet(true);
      }
    }
  }

  public static void main(String[] args) throws Exception{
    HelloMessage helloMessage = new HelloMessage();
    helloMessage.setErrorCode(0);
    helloMessage.setErrorMsg("error");
    helloMessage.setMsgId(111);
    helloMessage.setMsgBody("sllls");
    helloMessage.setMsgName("msgName");
    helloMessage.setValidFlag(true);

    TSerializer serializer = new TSerializer(new TSimpleJSONProtocol.Factory());
    String json = serializer.toString(helloMessage);

    System.out.println(json);

  }
}

